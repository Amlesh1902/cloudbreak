--- user.py.orig	2021-11-04 14:35:07.444728495 +0000
+++ user.py	2021-11-04 14:37:45.119571053 +0000
@@ -589,18 +589,18 @@

     def post_callback(self, ldap, dn, entry_attrs, *keys, **options):
         assert isinstance(dn, DN)
-        config = ldap.get_ipa_config()
+#        config = ldap.get_ipa_config()
         # add the user we just created into the default primary group
-        def_primary_group = config.get('ipadefaultprimarygroup')
-        group_dn = self.api.Object['group'].get_dn(def_primary_group)
+#        def_primary_group = config.get('ipadefaultprimarygroup')
+#        group_dn = self.api.Object['group'].get_dn(def_primary_group)

         # if the user is already a member of default primary group,
         # do not raise error
         # this can happen if automember rule or default group is set
-        try:
-            ldap.add_entry_to_group(dn, group_dn)
-        except errors.AlreadyGroupMember:
-            pass
+#        try:
+#            ldap.add_entry_to_group(dn, group_dn)
+#        except errors.AlreadyGroupMember:
+#            pass

         # Fetch the entry again to update memberof, mep data, etc updated
         # at the end of the transaction.
@@ -707,7 +707,7 @@
         # delete user (delete container).
         # If the target entry is a Delete entry, skip the orphaning/removal
         # of OTP tokens.
-        check_protected_member(keys[-1])
+#        check_protected_member(keys[-1])

         if not options.get('preserve', False):
             # Remove any ID overrides tied with this user
@@ -1017,7 +1017,7 @@
     def execute(self, *keys, **options):
         ldap = self.obj.backend
 
-        check_protected_member(keys[-1])
+#        check_protected_member(keys[-1])
 
         dn = self.obj.get_either_dn(*keys, **options)
         ldap.deactivate_entry(dn)
