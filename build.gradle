buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.0.2.RELEASE")
    }
}

def env = project.hasProperty('env') ? project.getProperty('env') : 'local'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'maven'
apply plugin: 'checkstyle'

sourceCompatibility = 1.7
group = 'com.sequenceiq'

allprojects { 
    apply from: "$rootDir/gradle/versioning.gradle"
    ext.config = new ConfigSlurper(env).parse(file("$rootDir/gradle/config/buildConfig.groovy").toURL()) 
}

jar {
    baseName = 'provisioning-api'
}

configurations {
    deployerJars
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: "s3://seq-repo/releases") {
                authentication(userName: "$System.env.aws_access_key_id", passphrase: "$System.env.aws_secret_access_key")
            }
            snapshotRepository(url: "s3://seq-repo/snapshots") {
                authentication(userName: "$System.env.aws_access_key_id", passphrase: "$System.env.aws_secret_access_key")
            }
        }
    }
}

checkstyleMain {
    ignoreFailures = false
    configProperties = ['config_loc': "$projectDir/config/checkstyle"]
}

checkstyleTest {
    ignoreFailures = false
    configProperties = ['config_loc': "$projectDir/config/checkstyle"]
}

repositories {
    mavenCentral()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web:1.0.2.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-actuator:1.0.2.RELEASE")
    testCompile("org.springframework.boot:spring-boot-starter-test:1.0.2.RELEASE")
    deployerJars("org.springframework.build.aws:org.springframework.build.aws.maven:3.0.0.RELEASE")
}

task wrapper(type: Wrapper) { gradleVersion = "1.12" }

task buildInfo(type: BuildInfoTask) {
    destination = file("$buildDir")
    basename = jar.baseName
    buildVersion =  version
}

compileJava.dependsOn buildInfo

class BuildInfoTask extends DefaultTask {
    File destination = new File("build.info")
    String basename
    String buildVersion

    @TaskAction
    def writeBuildInfo() {
        destination.mkdirs()
        new File(destination, "build.info").withWriter { out ->
            [
                "ARTIFACT_BASENAME=" + basename,
                "ARTIFACT_VERSION=" + buildVersion,
            ].each { out.println it } }
    }
}
