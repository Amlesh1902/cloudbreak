<<<<<<< HEAD
import org.ajoberstar.gradle.git.release.opinion.Strategies
import org.ajoberstar.gradle.git.release.opinion.Strategies.BuildMetadata
import org.ajoberstar.gradle.git.release.opinion.Strategies.PreRelease
import org.ajoberstar.gradle.git.release.semver.ChangeScope
import org.ajoberstar.gradle.git.release.semver.PartialSemVerStrategy
import org.ajoberstar.gradle.git.release.semver.SemVerStrategyState
import org.ajoberstar.gradle.git.release.semver.SemVerStrategy
import org.ajoberstar.gradle.git.release.semver.TagUtil
import org.ajoberstar.grgit.Grgit
import com.github.zafarkhaja.semver.Version


import static org.ajoberstar.gradle.git.release.semver.StrategyUtil.*

final class VersionUtils {
    final static Version getNearestPreReleaseVersion(Grgit grgit, SemVerStrategyState state, String label) {
        List versionTags = grgit.tag.list().inject([]) { list, tag ->
            Version version = TagUtil.parseAsVersion(tag)
            if (version) {
                if (grgit.isAncestorOf(tag, state.currentHead)) {
                    def reachableCommitLog = grgit.log {
                        range tag.commit.id, state.currentHead.id
                    }
                    def distance = reachableCommitLog.size()
                    def data = [version: version, distance: distance]
                    list << data
                }
            }
            list
        }

        Map preRelease = versionTags.findAll { versionTag ->
            versionTag.version.preReleaseVersion.contains(label)
        }.min { a, b ->
            a.distance <=> b.distance ?: (a.version <=> b.version) * -1
        }
        return preRelease.version
    }
}

final class VersionStrategies {

    private Grgit grgit

    public VersionStrategies(Grgit grgit) {
        this.grgit = grgit
    }

    final class Normal {

        private Grgit grgit

        public Normal(Grgit grgit) {
            this.grgit = grgit
        }

        final PartialSemVerStrategy INCREMENT_FROM_PRE_RELEASE = closure { state ->
            def nearestAny = state.nearestVersion.any
            if ("dev".equals(state.stageFromProp) && ("".equals(nearestAny.preReleaseVersion) || nearestAny.preReleaseVersion.contains("rc"))) {
                switch (state.scopeFromProp) {
                    case ChangeScope.MAJOR:
                        return state.copyWith(inferredNormal: nearestAny.incrementMajorVersion())
                    case ChangeScope.MINOR:
                        return state.copyWith(inferredNormal: nearestAny.incrementMinorVersion())
                    case ChangeScope.PATCH:
                        return state.copyWith(inferredNormal: nearestAny.incrementPatchVersion())
                    default:
                        return state
                }
            } else if ("rc".equals(state.stageFromProp)) {
                if ("".equals(nearestAny.preReleaseVersion)) {
                    return state.copyWith(inferredNormal: nearestAny.incrementPatchVersion())
                } else if (state.scopeFromProp == ChangeScope.PATCH) {
                    def rcVersion = VersionUtils.getNearestPreReleaseVersion(grgit, state, "rc")
                    return state.copyWith(inferredNormal: rcVersion.normalVersion)
                } else {
                    return state.copyWith(inferredNormal: nearestAny.normalVersion)
                }
            } else {
                return state.copyWith(inferredNormal: nearestAny.normalVersion)
            }
        }
    }

    final class PreRelStrategies {

        private Grgit grgit
        private String preReleaseLabel

        public PreRelStrategies(Grgit grgit, String preReleaseLabel) {
            this.grgit = grgit
            this.preReleaseLabel = preReleaseLabel
        }

        final PartialSemVerStrategy COUNT_INCREMENTED = closure { state ->
            def nearest = state.nearestVersion
            def nearestPreRelease
            def nearestRc = VersionUtils.getNearestPreReleaseVersion(grgit, state, "rc")
            def currentPreIdents = state.inferredPreRelease ? state.inferredPreRelease.split('\\.') as List : []
            if (preReleaseLabel.equals("rc") || (preReleaseLabel.equals("dev") && nearestRc.preReleaseVersion.equals("rc.1"))){
                nearestPreRelease = nearestRc
            } else {
                nearestPreRelease = VersionUtils.getNearestPreReleaseVersion(grgit, state, "dev")
            }
            if (nearestPreRelease == nearest.normal || nearestPreRelease.normalVersion != state.inferredNormal) {
                currentPreIdents << '1'
            } else {
                def nearestPreIdents = nearestPreRelease.preReleaseVersion.split('\\.')
                if (nearestPreIdents.size() <= currentPreIdents.size()) {
                    currentPreIdents << '1'
                } else if (currentPreIdents == nearestPreIdents[0..(currentPreIdents.size() - 1)]) {
                    def count = parseIntOrZero(nearestPreIdents[currentPreIdents.size()])
                    currentPreIdents << Integer.toString(count + 1)
                } else {
                    currentPreIdents << '1'
                }
            }
            return state.copyWith(inferredPreRelease: currentPreIdents.join('.'))
        }
    }

    final SemVerStrategy FEATURE_BRANCH = Strategies.DEFAULT.copyWith(
            name: 'feature-branch',
            stages: ['fb'] as SortedSet,
            allowDirtyRepo: true,
            preReleaseStrategy: all(PreRelease.STAGE_FLOAT, PreRelease.COUNT_COMMITS_SINCE_ANY, PreRelease.SHOW_UNCOMMITTED),
            buildMetadataStrategy: BuildMetadata.COMMIT_ABBREVIATED_ID,
            createTag: false
    )

    final SemVerStrategy DEV = Strategies.DEFAULT.copyWith(
            name: 'development',
            stages: ['dev'] as SortedSet,
            allowDirtyRepo: true,
            normalStrategy: new Normal(grgit).INCREMENT_FROM_PRE_RELEASE,
            preReleaseStrategy: all(PreRelease.STAGE_FIXED, new PreRelStrategies(grgit, "dev").COUNT_INCREMENTED)
    )

    final SemVerStrategy RC = Strategies.DEFAULT.copyWith(
            name: 'pre-release',
            stages: ['rc'] as SortedSet,
            allowDirtyRepo: true,
            normalStrategy: new Normal(grgit).INCREMENT_FROM_PRE_RELEASE,
            preReleaseStrategy: all(PreRelease.STAGE_FIXED, new PreRelStrategies(grgit, "rc").COUNT_INCREMENTED),
            enforcePrecedence: false
    )

    final SemVerStrategy FINAL = Strategies.DEFAULT.copyWith(
            name: 'release',
            stages: ['final'] as SortedSet,
            allowDirtyRepo: true,
            enforcePrecedence: false
    )
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.ajoberstar:gradle-git:1.2.0"
        classpath "com.smokejumperit.gradle.license:Gradle-License-Report:0.0.2"
    }
}

apply plugin: 'org.ajoberstar.release-opinion'

release {
    grgit = Grgit.open(project.file('.'))

    VersionStrategies versionStrategies = new VersionStrategies(grgit)

    versionStrategy versionStrategies.FINAL
    versionStrategy versionStrategies.RC
    versionStrategy versionStrategies.FEATURE_BRANCH
    versionStrategy versionStrategies.DEV

    defaultVersionStrategy = versionStrategies.FEATURE_BRANCH

    tagStrategy {
        prefixNameWithV = false
    }
}

def env = project.hasProperty('env') ? project.getProperty('env') : 'local'
ext.config = new ConfigSlurper(env).parse(file("$rootDir/gradle/config/buildConfig.groovy").toURL())

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    group = 'com.sequenceiq'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'checkstyle'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    configurations {
        deployerJars
        all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        all*.exclude group: 'com.google.guava', module: 'guava-jdk5'
        testCompile.exclude module: 'groovy-all'
    }

    dependencies {
        deployerJars("org.springframework.build.aws:org.springframework.build.aws.maven:3.0.0.RELEASE")
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                configuration = configurations.deployerJars
                repository(url: "s3://maven.sequenceiq.com/releases") {
                    authentication(userName: "$System.env.AWS_ACCESS_KEY", passphrase: "$System.env.AWS_SECRET_ACCESS_KEY")
                }
                snapshotRepository(url: "s3://maven.sequenceiq.com/snapshots") {
                    authentication(userName: "$System.env.AWS_ACCESS_KEY", passphrase: "$System.env.AWS_SECRET_ACCESS_KEY")
                }
            }
        }
    }

    checkstyleMain {
        ignoreFailures = false
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        configProperties = ['config_loc': "$rootDir/config/checkstyle"]
    }

    checkstyleTest {
        ignoreFailures = false
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        configProperties = ['config_loc': "$rootDir/config/checkstyle"]
    }

    dependencies {
        checkstyle('com.puppycrawl.tools:checkstyle:5.7') {
            exclude group: 'com.google.guava'
        }
        checkstyle("com.google.guava:guava:16.0.1") { force = true }
    }

    repositories {
        mavenCentral()
        maven { url "http://maven.sequenceiq.com/releases" }
        mavenLocal()
=======
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.0.2.RELEASE")
    }
}

group = 'com.sequenceiq'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'spring-boot'
apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'jacoco'

sourceCompatibility = 1.7
targetCompatibility = 1.7

def env = project.hasProperty('env') ? project.getProperty('env') : 'local'
logger.quiet "Loading configuration for environment '$env'"

repositories {
    mavenCentral()
}

jar { baseName = 'periscope' }

configurations {
    deployerJars
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: "s3://seq-repo/releases") {
                authentication(userName: "$System.env.aws_access_key_id", passphrase: "$System.env.aws_secret_access_key")
            }
            snapshotRepository(url: "s3://seq-repo/snapshots") {
                authentication(userName: "$System.env.aws_access_key_id", passphrase: "$System.env.aws_secret_access_key")
            }
        }
    }
}

repositories {
    mavenCentral()
    maven { url "http://maven.sequenceiq.com/snapshots" }
    maven { url "http://maven.sequenceiq.com/releases" }
    maven { url "http://seq-repo.s3-website-eu-west-1.amazonaws.com/public" }
    maven { url "http://seq-repo.s3-website-eu-west-1.amazonaws.com/releases" }
    maven { url "http://seq-repo.s3-website-eu-west-1.amazonaws.com/snapshots" }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web:1.0.2.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-security:1.0.2.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-actuator:1.0.2.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-data-jpa:1.0.2.RELEASE")
    compile("org.springframework:spring-context-support:4.0.3.RELEASE")
    compile("org.apache.commons:commons-lang3:3.3.2")
    compile("org.hsqldb:hsqldb:2.3.2")
    compile("org.apache.hadoop:hadoop-yarn-client:${hadoopVersion}")
    compile("org.apache.hadoop:hadoop-yarn-server-resourcemanager:${hadoopVersion}")
    compile("org.apache.hadoop:hadoop-common:${hadoopVersion}")
    compile("com.sequenceiq.ambari:ambari-client:1.6.0-SNAPSHOT")
    compile("javax.servlet:javax.servlet-api:3.0.1")
    compile("com.sequenceiq:cloudbreak-rest-client:0.1.6")
    compile("org.freemarker:freemarker:2.3.20")
    compile("javax.mail:mail:1.4.7")
    testCompile("junit:junit:4.11")
    testCompile("org.mockito:mockito-all:1.9.5")
    testCompile("org.springframework:spring-test:4.0.2.RELEASE")
}

springBoot { mainClass = "com.sequenceiq.periscope.PeriscopeApplication" }

checkstyleMain {
    ignoreFailures = false
    configProperties = ['config_loc': "$projectDir/config/checkstyle"]
}

checkstyleTest {
    ignoreFailures = false
    configProperties = ['config_loc': "$projectDir/config/checkstyle"]
}

task wrapper(type: Wrapper) { gradleVersion = "2.0" }

test {
    include 'com/sequenceiq/**'
    testLogging.showStandardStreams = true
    ignoreFailures = false
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}

jacoco {
    toolVersion = "0.6.2.201302030002"
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
>>>>>>> 413c239... PERI-3 initial spring boot app
    }
}