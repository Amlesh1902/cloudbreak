buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

jar {
    baseName = 'cloudbreak-integration-test'
}

apply plugin: 'spring-boot'

dependencies {
    compile project(':cloud-common')
    compile project(':core-api')
    compile("com.sequenceiq:${ambariClientName}:${ambariClientVersion}") {
        exclude group: 'org.slf4j';
    }
    compile group:  'org.springframework.boot',     name: 'spring-boot-starter',      version: springBootVersion
    compile group:  'org.springframework.boot',     name: 'spring-boot-starter-test', version: springBootVersion
    compile group:  'org.springframework',          name: 'spring-web',               version: springFrameworkVersion
    compile group:  'org.springframework',          name: 'spring-context-support',   version: springFrameworkVersion
    compile group:  'org.apache.velocity',          name: 'velocity',                 version: '1.7'
    compile group:  'com.jcraft',                   name: 'jsch',                     version: '0.1.53'
    compile group:  'org.testng',                   name: 'testng',                   version: '6.9.10'

    compile ("org.uncommons:reportng:1.1.4") {
        exclude group: "velocity"
    }
    runtime group: 'com.google.inject',             name: 'guice',                    version: '3.0'
    runtime group: 'org.hibernate',                 name: 'hibernate-validator',      version: hibernateValidatorVersion
}

task buildInfo(type: BuildInfoTask) {
    destination = file("$buildDir")
    applicationPropertiesPath = "$buildDir"
    basename = jar.baseName
    buildVersion = version
}

compileJava.dependsOn buildInfo

class BuildInfoTask extends DefaultTask {
    File destination = new File("build.info")
    String applicationPropertiesPath
    String basename
    String buildVersion

    @TaskAction
    def writeBuildInfo() {
        destination.mkdirs()
        File applicationDestination = new File(applicationPropertiesPath + "/resources/main")
        applicationDestination.mkdirs()
        new File(destination, "build.info").withWriter { out ->
            [
                    "ARTIFACT_BASENAME=" + basename,
                    "ARTIFACT_VERSION=" + buildVersion,
            ].each { out.println it }
        }
        new File(applicationDestination, "application.properties").withWriter { out ->
            [
                    "info.app.name=" + basename,
                    "info.app.version=" + buildVersion
            ].each { out.println it }
        }
    }
}